// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddrChanged extends ethereum.Event {
  get params(): AddrChanged__Params {
    return new AddrChanged__Params(this);
  }
}

export class AddrChanged__Params {
  _event: AddrChanged;

  constructor(event: AddrChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get a(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AddressChanged extends ethereum.Event {
  get params(): AddressChanged__Params {
    return new AddressChanged__Params(this);
  }
}

export class AddressChanged__Params {
  _event: AddressChanged;

  constructor(event: AddressChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get coinType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newAddress(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class AuthorisationChanged extends ethereum.Event {
  get params(): AuthorisationChanged__Params {
    return new AuthorisationChanged__Params(this);
  }
}

export class AuthorisationChanged__Params {
  _event: AuthorisationChanged;

  constructor(event: AuthorisationChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get isAuthorised(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class ContenthashChanged extends ethereum.Event {
  get params(): ContenthashChanged__Params {
    return new ContenthashChanged__Params(this);
  }
}

export class ContenthashChanged__Params {
  _event: ContenthashChanged;

  constructor(event: ContenthashChanged) {
    this._event = event;
  }

  get node(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get hash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Resolver extends ethereum.SmartContract {
  static bind(address: Address): Resolver {
    return new Resolver("Resolver", address);
  }

  addr(node: Bytes): Address {
    let result = super.call("addr", "addr(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(node)
    ]);

    return result[0].toAddress();
  }

  try_addr(node: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("addr", "addr(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addr1(node: Bytes, coinType: BigInt): Bytes {
    let result = super.call("addr", "addr(bytes32,uint256):(bytes)", [
      ethereum.Value.fromFixedBytes(node),
      ethereum.Value.fromUnsignedBigInt(coinType)
    ]);

    return result[0].toBytes();
  }

  try_addr1(node: Bytes, coinType: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("addr", "addr(bytes32,uint256):(bytes)", [
      ethereum.Value.fromFixedBytes(node),
      ethereum.Value.fromUnsignedBigInt(coinType)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  authorisations(param0: Bytes, param1: Address, param2: Address): boolean {
    let result = super.call(
      "authorisations",
      "authorisations(bytes32,address,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_authorisations(
    param0: Bytes,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorisations",
      "authorisations(bytes32,address,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkCallData(node: Bytes, data: Array<Bytes>): boolean {
    let result = super.call(
      "checkCallData",
      "checkCallData(bytes32,bytes[]):(bool)",
      [ethereum.Value.fromFixedBytes(node), ethereum.Value.fromBytesArray(data)]
    );

    return result[0].toBoolean();
  }

  try_checkCallData(
    node: Bytes,
    data: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkCallData",
      "checkCallData(bytes32,bytes[]):(bool)",
      [ethereum.Value.fromFixedBytes(node), ethereum.Value.fromBytesArray(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contenthash(node: Bytes): Bytes {
    let result = super.call("contenthash", "contenthash(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(node)
    ]);

    return result[0].toBytes();
  }

  try_contenthash(node: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("contenthash", "contenthash(bytes32):(bytes)", [
      ethereum.Value.fromFixedBytes(node)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ens(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wrapper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class SetAddrCall extends ethereum.Call {
  get inputs(): SetAddrCall__Inputs {
    return new SetAddrCall__Inputs(this);
  }

  get outputs(): SetAddrCall__Outputs {
    return new SetAddrCall__Outputs(this);
  }
}

export class SetAddrCall__Inputs {
  _call: SetAddrCall;

  constructor(call: SetAddrCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get coinType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get a(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetAddrCall__Outputs {
  _call: SetAddrCall;

  constructor(call: SetAddrCall) {
    this._call = call;
  }
}

export class SetAddr1Call extends ethereum.Call {
  get inputs(): SetAddr1Call__Inputs {
    return new SetAddr1Call__Inputs(this);
  }

  get outputs(): SetAddr1Call__Outputs {
    return new SetAddr1Call__Outputs(this);
  }
}

export class SetAddr1Call__Inputs {
  _call: SetAddr1Call;

  constructor(call: SetAddr1Call) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get a(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAddr1Call__Outputs {
  _call: SetAddr1Call;

  constructor(call: SetAddr1Call) {
    this._call = call;
  }
}

export class SetAuthorisationCall extends ethereum.Call {
  get inputs(): SetAuthorisationCall__Inputs {
    return new SetAuthorisationCall__Inputs(this);
  }

  get outputs(): SetAuthorisationCall__Outputs {
    return new SetAuthorisationCall__Outputs(this);
  }
}

export class SetAuthorisationCall__Inputs {
  _call: SetAuthorisationCall;

  constructor(call: SetAuthorisationCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get isAuthorised(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetAuthorisationCall__Outputs {
  _call: SetAuthorisationCall;

  constructor(call: SetAuthorisationCall) {
    this._call = call;
  }
}

export class SetContenthashCall extends ethereum.Call {
  get inputs(): SetContenthashCall__Inputs {
    return new SetContenthashCall__Inputs(this);
  }

  get outputs(): SetContenthashCall__Outputs {
    return new SetContenthashCall__Outputs(this);
  }
}

export class SetContenthashCall__Inputs {
  _call: SetContenthashCall;

  constructor(call: SetContenthashCall) {
    this._call = call;
  }

  get node(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get hash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetContenthashCall__Outputs {
  _call: SetContenthashCall;

  constructor(call: SetContenthashCall) {
    this._call = call;
  }
}
